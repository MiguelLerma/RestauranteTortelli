/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import JPAControl.FacturaJpaController;
import JPAControl.PedidoJpaController;
import JPAControl.ProductosFacturaJpaController;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import restaurantetorteli.DiasVentas;
import restaurantetorteli.Factura;
import restaurantetorteli.ItemsVendidos;
import restaurantetorteli.Jugador;
import restaurantetorteli.Meseros;
import restaurantetorteli.Pedido;
import restaurantetorteli.ProductosFactura;
import restaurantetorteli.Reporte;

/**
 *
 * @author User
 */
public class Reportes extends javax.swing.JFrame {

    /**
     * Creates new form Reportes
     */
    public Reportes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ventanaVentaSemana = new javax.swing.JFrame();
        calendario = new com.toedter.calendar.JCalendar();
        botongenerarreporte = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Reporte1 = new javax.swing.JButton();
        Reporte2 = new javax.swing.JButton();
        Reporte3 = new javax.swing.JButton();
        Reporte4 = new javax.swing.JButton();
        Reporte5 = new javax.swing.JButton();
        Reporte6 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        botongenerarreporte.setText("Generar Reporte");
        botongenerarreporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botongenerarreporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ventanaVentaSemanaLayout = new javax.swing.GroupLayout(ventanaVentaSemana.getContentPane());
        ventanaVentaSemana.getContentPane().setLayout(ventanaVentaSemanaLayout);
        ventanaVentaSemanaLayout.setHorizontalGroup(
            ventanaVentaSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ventanaVentaSemanaLayout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
            .addGroup(ventanaVentaSemanaLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(botongenerarreporte)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ventanaVentaSemanaLayout.setVerticalGroup(
            ventanaVentaSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ventanaVentaSemanaLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botongenerarreporte)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        jLabel1.setText("Reportes");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 6, -1, -1));

        Reporte1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GraficosCompletos - copia.png"))); // NOI18N
        Reporte1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporte1ActionPerformed(evt);
            }
        });
        jPanel1.add(Reporte1, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 121, 144, 106));

        Reporte2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GraficosCompletos - copia (2).png"))); // NOI18N
        Reporte2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporte2ActionPerformed(evt);
            }
        });
        jPanel1.add(Reporte2, new org.netbeans.lib.awtextra.AbsoluteConstraints(293, 121, 144, 106));

        Reporte3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GraficosCompletos - copia (3).png"))); // NOI18N
        Reporte3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporte3ActionPerformed(evt);
            }
        });
        jPanel1.add(Reporte3, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 317, 144, 106));

        Reporte4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GraficosCompletos - copia (4).png"))); // NOI18N
        Reporte4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporte4ActionPerformed(evt);
            }
        });
        jPanel1.add(Reporte4, new org.netbeans.lib.awtextra.AbsoluteConstraints(293, 317, 144, 106));

        Reporte5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GraficosCompletos - copia (5).png"))); // NOI18N
        Reporte5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporte5ActionPerformed(evt);
            }
        });
        jPanel1.add(Reporte5, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 513, 144, 106));

        Reporte6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GraficosCompletos - copia (6).png"))); // NOI18N
        Reporte6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporte6ActionPerformed(evt);
            }
        });
        jPanel1.add(Reporte6, new org.netbeans.lib.awtextra.AbsoluteConstraints(293, 513, 144, 106));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 640, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Verde-Luz-SÃ³lido-Pintura.jpg"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, 680));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Reporte1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporte1ActionPerformed

        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("RestauranteTorteliPU");//PruebaJPAPU es el nombre de nuestra unidad de persistencia

        FacturaJpaController dao = new FacturaJpaController(emf);//Creamos un controlador de personal
        ProductosFacturaJpaController pdotuctoFaJPA = new ProductosFacturaJpaController(emf);//Creamos un controlador de personal

        Date date = new Date();

        List<Factura> listaFacturas = dao.findFacturaEntities();
        ArrayList<Factura> listaFactMes = new ArrayList<>();

        for (int i = 0; i < listaFacturas.size(); i++) {

            if (listaFacturas.get(i).getFechafactura().getMonth() == date.getMonth()) {

                listaFactMes.add(listaFacturas.get(i));

            }
        }

        List<ProductosFactura> listaProductos = pdotuctoFaJPA.findProductosFacturaEntities();
        ArrayList<ProductosFactura> listaProduSele = new ArrayList<>();

        for (int i = 0; i < listaFactMes.size(); i++) {

            for (int j = 0; j < listaProductos.size(); j++) {

                if (listaProductos.get(j).getProductosFacturaPK().getFacturaFacturaid() == listaFactMes.get(i).getFacturaid()) {

                    listaProduSele.add(listaProductos.get(j));

                }

            }
        }

        List<Jugador> listaJugadores = new ArrayList();

        int contador = 0;
        for (int i = 0; i < listaProduSele.size(); i++) {

            for (int j = 0; j < listaProduSele.get(i).getCantidad(); j++) {

                listaJugadores.add(new Jugador(contador, "" + listaProduSele.get(i).getFactura().getFacturaid(), listaProduSele.get(i).getNombreProducto()));
                contador++;
            }

        }

        HashMap<String, List<String>> hashMap = new HashMap<String, List<String>>();

        for (int i = 0; i < listaJugadores.size(); i++) {

            if (!hashMap.containsKey(listaJugadores.get(i).getConsola())) {

                List<String> list = new ArrayList<String>();
                list.add(listaJugadores.get(i).getConsola());

                hashMap.put(listaJugadores.get(i).getConsola(), list);
            } else {
                hashMap.get(listaJugadores.get(i).getConsola()).add(listaJugadores.get(i).getConsola());
            }

        }

        ArrayList<ItemsVendidos> listaItems = new ArrayList<>();
        for (Map.Entry<String, List<String>> entry : hashMap.entrySet()) {

            ItemsVendidos item = new ItemsVendidos();
            item.setCantidad(entry.getValue().size());
            item.setNombre(entry.getKey());
            listaItems.add(item);

        }

        Collections.sort(listaItems, new Comparator<ItemsVendidos>() {

            @Override
            public int compare(ItemsVendidos p1, ItemsVendidos p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getCantidad()).compareTo(new Integer(p1.getCantidad()));
            }

        });

        for (int i = 0; i < listaItems.size(); i++) {

            System.out.println(listaItems.get(i).getNombre() + " " + listaItems.get(i).getCantidad());

        }

        /*
        
        
        
         HashMap<Integer, List<ProductosFactura>> hashMap = new HashMap<Integer, List<ProductosFactura>>();
        
         
         for (int i = 0; i < listaProduSele.size(); i++) {
            
             
         if (!hashMap.containsKey(listaProduSele.get(i).getProductosFacturaPK().getIdProducto())) {
         List<ProductosFactura> list = new ArrayList<ProductosFactura>();
         list.add(listaProduSele.get(i));

         hashMap.put(listaProduSele.get(i).getProductosFacturaPK().getIdProducto(), list);
         } else {
         hashMap.get(listaProduSele.get(i).getProductosFacturaPK().getIdProducto()).add(listaProduSele.get(i));
         }
             
             
             
         }
         
        

         hashMap.get(1).size();

        
        
        
        
        
         for(int i = 50; i <= 79; i++)    
         {        
         listaJugadores.add(new Jugador(i, "Jugador " + i , "XBox"));    
         }     

         for(int i = 80; i <= 100; i++)    
         {        
         listaJugadores.add(new Jugador(i, "Jugador " + i , "PS3"));    
         }     
         */
        List listaReportes = new ArrayList();

        int contador2 = 0;

       List<ItemsVendidos> listaItemsMas = new ArrayList<>();

        for (int i = 0; i < 10; i++) {

            try {

                ItemsVendidos objeto = new ItemsVendidos();

                objeto.setNombre(listaItems.get(i).getNombre());
                objeto.setCantidad(listaItems.get(i).getCantidad());

                listaItemsMas.add(objeto);

            } catch (Exception e) {

            }

        }


        
        
        
        
        
        File ija = new File("reporteItemsMuchoMasVendidos.jasper");
        JasperReport reporte;
        try {

            reporte = (JasperReport) JRLoader.loadObject(ija);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, new JRBeanCollectionDataSource(listaItemsMas));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new File("reporteitemsMasVendidos.pdf"));

            exporter.exportReport();

            JOptionPane.showMessageDialog(null, "Reporte generado con exito");

        } catch (JRException ex) {
            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
        }

        emf.close();



// TODO add your handling code here:
    }//GEN-LAST:event_Reporte1ActionPerformed

    private void Reporte2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporte2ActionPerformed

        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("RestauranteTorteliPU");//PruebaJPAPU es el nombre de nuestra unidad de persistencia

        FacturaJpaController dao = new FacturaJpaController(emf);//Creamos un controlador de personal
        ProductosFacturaJpaController pdotuctoFaJPA = new ProductosFacturaJpaController(emf);//Creamos un controlador de personal

        Date date = new Date();

        List<Factura> listaFacturas = dao.findFacturaEntities();
        ArrayList<Factura> listaFactMes = new ArrayList<>();

        for (int i = 0; i < listaFacturas.size(); i++) {

            if (listaFacturas.get(i).getFechafactura().getMonth() == date.getMonth()) {

                listaFactMes.add(listaFacturas.get(i));

            }
        }

        List<ProductosFactura> listaProductos = pdotuctoFaJPA.findProductosFacturaEntities();
        ArrayList<ProductosFactura> listaProduSele = new ArrayList<>();

        for (int i = 0; i < listaFactMes.size(); i++) {

            for (int j = 0; j < listaProductos.size(); j++) {

                if (listaProductos.get(j).getProductosFacturaPK().getFacturaFacturaid() == listaFactMes.get(i).getFacturaid()) {

                    listaProduSele.add(listaProductos.get(j));

                }

            }
        }

        List<Jugador> listaJugadores = new ArrayList();

        int contador = 0;
        for (int i = 0; i < listaProduSele.size(); i++) {

            for (int j = 0; j < listaProduSele.get(i).getCantidad(); j++) {

                listaJugadores.add(new Jugador(contador, "" + listaProduSele.get(i).getFactura().getFacturaid(), listaProduSele.get(i).getNombreProducto()));
                contador++;
            }

        }

        HashMap<String, List<String>> hashMap = new HashMap<String, List<String>>();

        for (int i = 0; i < listaJugadores.size(); i++) {

            if (!hashMap.containsKey(listaJugadores.get(i).getConsola())) {

                List<String> list = new ArrayList<String>();
                list.add(listaJugadores.get(i).getConsola());

                hashMap.put(listaJugadores.get(i).getConsola(), list);
            } else {
                hashMap.get(listaJugadores.get(i).getConsola()).add(listaJugadores.get(i).getConsola());
            }

        }

        ArrayList<ItemsVendidos> listaItems = new ArrayList<>();
        for (Map.Entry<String, List<String>> entry : hashMap.entrySet()) {

            ItemsVendidos item = new ItemsVendidos();
            item.setCantidad(entry.getValue().size());
            item.setNombre(entry.getKey());
            listaItems.add(item);

        }

        Collections.sort(listaItems, new Comparator<ItemsVendidos>() {

            @Override
            public int compare(ItemsVendidos p1, ItemsVendidos p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getCantidad()).compareTo(new Integer(p1.getCantidad()));
            }

        });

        for (int i = 0; i < listaItems.size(); i++) {

            System.out.println(listaItems.get(i).getNombre() + " " + listaItems.get(i).getCantidad());

        }

        /*
        
        
        
         HashMap<Integer, List<ProductosFactura>> hashMap = new HashMap<Integer, List<ProductosFactura>>();
        
         
         for (int i = 0; i < listaProduSele.size(); i++) {
            
             
         if (!hashMap.containsKey(listaProduSele.get(i).getProductosFacturaPK().getIdProducto())) {
         List<ProductosFactura> list = new ArrayList<ProductosFactura>();
         list.add(listaProduSele.get(i));

         hashMap.put(listaProduSele.get(i).getProductosFacturaPK().getIdProducto(), list);
         } else {
         hashMap.get(listaProduSele.get(i).getProductosFacturaPK().getIdProducto()).add(listaProduSele.get(i));
         }
             
             
             
         }
         
        

         hashMap.get(1).size();

        
        
        
        
        
         for(int i = 50; i <= 79; i++)    
         {        
         listaJugadores.add(new Jugador(i, "Jugador " + i , "XBox"));    
         }     

         for(int i = 80; i <= 100; i++)    
         {        
         listaJugadores.add(new Jugador(i, "Jugador " + i , "PS3"));    
         }     
         */
        List listaReportes = new ArrayList();

        int contador2 = 0;

        for (int i = 0; i < 10; i++) {

            try {

                for (int j = 0; j < listaItems.get(i).getCantidad(); j++) {

                    listaReportes.add(new Jugador(contador2, listaItems.get(i).getNombre(), listaItems.get(i).getNombre()));
                    contador2++;
                }

            } catch (Exception e) {

            }
        }

        List<ItemsVendidos> listaItemsMenos = new ArrayList<>();

        for (int i = 0; i < 10; i++) {

            try {

                ItemsVendidos objeto = new ItemsVendidos();

                objeto.setNombre(listaItems.get(listaItems.size() - (i + 1)).getNombre());
                objeto.setCantidad(listaItems.get(listaItems.size() - (i + 1)).getCantidad());

                listaItemsMenos.add(objeto);

            } catch (Exception e) {

            }

        }

        File ija = new File("reporteItemsVendidos.jasper");
        JasperReport reporte;
        try {

            reporte = (JasperReport) JRLoader.loadObject(ija);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, new JRBeanCollectionDataSource(listaItemsMenos));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new File("reportesItemsMenosVendidos.pdf"));

            exporter.exportReport();

            JOptionPane.showMessageDialog(null, "Reporte generado con exito");

        } catch (JRException ex) {
            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
        }

        emf.close();
// TODO add your handling code here:
    }//GEN-LAST:event_Reporte2ActionPerformed

    private void Reporte3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporte3ActionPerformed

        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("RestauranteTorteliPU");//PruebaJPAPU es el nombre de nuestra unidad de persistencia

        PedidoJpaController dao = new PedidoJpaController(emf);//Creamos un controlador de personal

        Date date = new Date();

        List<Pedido> listaTodos = dao.findPedidoEntities();

        long acumuladoruno = 0;
        int divicionUno = 0;

        double acumuladordos = 0;
        int divicionDos = 0;

        long acumuladortres = 0;
        int divicionTres = 0;

        double acumuladorcuatro = 0;
        int divicionCuatro = 0;

        long acumuladorcinco = 0;
        int divicionCinco = 0;

        double acumuladorseis = 0;
        int divicionSeis = 0;

        Date fechaMeses;

        ArrayList<Integer> listaNumeroMes = new ArrayList<>();

        for (int i = 0; i < listaTodos.size(); i++) {

            System.out.println(listaTodos.get(i).getHorapedido());

            Date datse = new Date();
            GregorianCalendar calendar = new GregorianCalendar();
            calendar.setTime(datse);

            calendar.add(Calendar.MONTH, -0);
            fechaMeses = calendar.getTime();

            listaNumeroMes.add(fechaMeses.getMonth());

            System.out.println("" + listaTodos.get(i).getHorapedido().getMonth() + " " + fechaMeses.getMonth());
            if (listaTodos.get(i).getHorapedido().getMonth() == fechaMeses.getMonth()) {

                System.out.println("Enttrega " + listaTodos.get(i).getHoraentrega().toString());
                System.out.println("Pedido " + listaTodos.get(i).getHorapedido().toString());

                acumuladoruno += (listaTodos.get(i).getHoraentrega().getTime() - listaTodos.get(i).getHorapedido().getTime()) / 1000;
                divicionUno++;

            }

            Date date2 = new Date();
            GregorianCalendar calendar2 = new GregorianCalendar();
            calendar2.setTime(date2);
            calendar2.add(Calendar.MONTH, -1);
            fechaMeses = calendar2.getTime();
            listaNumeroMes.add(fechaMeses.getMonth());

            if (listaTodos.get(i).getHorapedido().getMonth() == fechaMeses.getMonth()) {

                acumuladordos += (listaTodos.get(i).getHoraentrega().getTime() - listaTodos.get(i).getHorapedido().getTime()) / 1000;
                divicionDos++;

            }

            Date date3 = new Date();
            GregorianCalendar calendar3 = new GregorianCalendar();
            calendar3.setTime(date3);
            calendar3.add(Calendar.MONTH, -2);
            fechaMeses = calendar3.getTime();
            listaNumeroMes.add(fechaMeses.getMonth());

            if (listaTodos.get(i).getHorapedido().getMonth() == fechaMeses.getMonth()) {

                acumuladortres += (listaTodos.get(i).getHoraentrega().getTime() - listaTodos.get(i).getHorapedido().getTime()) / 1000;
                divicionTres++;

            }

            Date date4 = new Date();
            GregorianCalendar calendar4 = new GregorianCalendar();
            calendar4.setTime(date4);
            calendar4.add(Calendar.MONTH, -3);
            fechaMeses = calendar4.getTime();
            listaNumeroMes.add(fechaMeses.getMonth());

            if (listaTodos.get(i).getHorapedido().getMonth() == fechaMeses.getMonth()) {

                acumuladorcuatro += (listaTodos.get(i).getHoraentrega().getTime() - listaTodos.get(i).getHorapedido().getTime()) / 1000;
                divicionCuatro++;

            }

            Date date5 = new Date();
            GregorianCalendar calendar5 = new GregorianCalendar();
            calendar5.setTime(date5);
            calendar5.add(Calendar.MONTH, -4);
            fechaMeses = calendar5.getTime();
            listaNumeroMes.add(fechaMeses.getMonth());

            if (listaTodos.get(i).getHorapedido().getMonth() == fechaMeses.getMonth()) {

                acumuladorcinco += (listaTodos.get(i).getHoraentrega().getTime() - listaTodos.get(i).getHorapedido().getTime()) / 1000;
                divicionCinco++;

            }

            Date date6 = new Date();
            GregorianCalendar calendar6 = new GregorianCalendar();
            calendar6.setTime(date6);
            calendar6.add(Calendar.MONTH, -5);
            fechaMeses = calendar6.getTime();
            listaNumeroMes.add(fechaMeses.getMonth());

            if (listaTodos.get(i).getHorapedido().getMonth() == fechaMeses.getMonth()) {

                acumuladorseis += (listaTodos.get(i).getHoraentrega().getTime() - listaTodos.get(i).getHorapedido().getTime()) / 1000;
                divicionSeis++;

            }

        }

             // Double d = new Double(acumuladoruno);
        //int i = d.intValue();
        System.out.println("" + acumuladoruno);
        System.out.println("" + divicionUno);

        System.out.println("Primer promedio " + ((acumuladoruno / divicionUno) / 60) + " Segundo promedio " + ((acumuladordos / divicionDos) / 60));

        int cuenta1 = 0;
        int cuenta2 = 0;
        int cuenta3 = 0;
        int cuenta4 = 0;
        int cuenta5 = 0;
        int cuenta6 = 0;

        try {
            Double d = new Double((acumuladoruno / divicionUno) / 60);
            cuenta1 = d.intValue();

        } catch (Exception e) {

            cuenta1 = 0;

        }

        try {
            Double q = new Double((acumuladordos / divicionDos) / 60);
            cuenta2 = q.intValue();

        } catch (Exception e) {

            cuenta2 = 0;

        }

        try {
            Double r = new Double((acumuladortres / divicionTres) / 60);
            cuenta3 = r.intValue();

        } catch (Exception e) {

            cuenta3 = 0;

        }

        try {
            Double y = new Double((acumuladorcuatro / divicionCuatro) / 60);
            cuenta4 = y.intValue();

        } catch (Exception e) {

            cuenta4 = 0;

        }

        try {
            Double u = new Double((acumuladorcinco / divicionCinco) / 60);
            cuenta5 = u.intValue();

        } catch (Exception e) {

            cuenta5 = 0;

        }

        try {
            Double i = new Double((acumuladorseis / divicionSeis) / 60);
            cuenta6 = i.intValue();

        } catch (Exception e) {

            cuenta6 = 0;

        }

        int contador2 = 0;

        List listaReportes = new ArrayList();

        String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", " ;Septiembre", "Octubre", "Noviembre", "Diciemrbre"};

        Date actual = new Date();
        int actualMes = actual.getMonth();

        for (int j = 0; j < cuenta1; j++) {

            listaReportes.add(new Reporte(contador2, meses[actualMes], meses[listaNumeroMes.get(0)]));
            contador2++;
        }

        for (int j = 0; j < cuenta2; j++) {

            listaReportes.add(new Jugador(contador2, meses[actualMes], meses[listaNumeroMes.get(1)]));
            contador2++;
        }
        for (int j = 0; j < cuenta3; j++) {

            listaReportes.add(new Jugador(contador2, meses[actualMes], meses[listaNumeroMes.get(2)]));
            contador2++;
        }
        for (int j = 0; j < cuenta4; j++) {

            listaReportes.add(new Jugador(contador2, meses[actualMes], meses[listaNumeroMes.get(3)]));
            contador2++;
        }
        for (int j = 0; j < cuenta5; j++) {

            listaReportes.add(new Jugador(contador2, meses[actualMes], meses[listaNumeroMes.get(4)]));
            contador2++;
        }
        for (int j = 0; j < cuenta6; j++) {

            listaReportes.add(new Jugador(contador2, meses[actualMes], meses[listaNumeroMes.get(5)]));
            contador2++;
        }

        List<DiasVentas> listaPromedio = new ArrayList();

        DiasVentas objeto = new DiasVentas();
        objeto.setDia("Lunes");
        objeto.setMes(meses[listaNumeroMes.get(0)]);
        objeto.setVenta(cuenta1);

        listaPromedio.add(objeto);

        DiasVentas objeto2 = new DiasVentas();
        objeto2.setDia("Martes");
        objeto2.setMes(meses[listaNumeroMes.get(1)]);
        objeto2.setVenta(cuenta2);

        listaPromedio.add(objeto2);

        DiasVentas objeto3 = new DiasVentas();
        objeto3.setDia("Miercoles");
        objeto3.setMes(meses[listaNumeroMes.get(2)]);
        objeto3.setVenta(cuenta3);

        listaPromedio.add(objeto3);

        DiasVentas objeto4 = new DiasVentas();
        objeto4.setDia("Jueves");
        objeto4.setMes(meses[listaNumeroMes.get(3)]);
        objeto4.setVenta(cuenta4);

        listaPromedio.add(objeto4);

        DiasVentas objeto5 = new DiasVentas();
        objeto5.setDia("Viernes");
        objeto5.setMes(meses[listaNumeroMes.get(4)]);
        objeto5.setVenta(cuenta5);

        listaPromedio.add(objeto5);

        DiasVentas objeto6 = new DiasVentas();
        objeto6.setDia("Sabado");
        objeto6.setMes(meses[listaNumeroMes.get(5)]);
        objeto6.setVenta(cuenta6);

        listaPromedio.add(objeto6);

        File ija = new File("reporteTiempoPromedio.jasper");
        JasperReport reporte;
        try {

            reporte = (JasperReport) JRLoader.loadObject(ija);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, new JRBeanCollectionDataSource(listaPromedio));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new File("reporteTiempoPromedio.pdf"));

            exporter.exportReport();

            JOptionPane.showMessageDialog(null, "Reporte generado con exito");

        } catch (JRException ex) {
            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
        }

        emf.close();
// TODO add your handling code here:
    }//GEN-LAST:event_Reporte3ActionPerformed

    private void Reporte4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporte4ActionPerformed

        
        ventanaVentaSemana.setEnabled(true);
        ventanaVentaSemana.setVisible(true);
        ventanaVentaSemana.pack();
// TODO add your handling code here:
    }//GEN-LAST:event_Reporte4ActionPerformed

    private void botongenerarreporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botongenerarreporteActionPerformed

        

        String fecha = new SimpleDateFormat("dd/MM/yyyy").format(calendario.getDate());

        System.out.println(fecha);

        String[] fechaSepa = fecha.split("/");

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("RestauranteTorteliPU");//PruebaJPAPU es el nombre de nuestra unidad de persistencia

        FacturaJpaController dao = new FacturaJpaController(emf);//Creamos un controlador de personal

        List<Factura> listaTodos = dao.findFacturaEntities();

        Calendar calendarioInicioSemana = Calendar.getInstance();

        /* Calculamos el lunes de la semana dada */
        calendarioInicioSemana.set(Integer.parseInt(fechaSepa[2]), Integer.parseInt(fechaSepa[1]) - 1, Integer.parseInt(fechaSepa[0]), 0, 0, 0);

        /* Si es domingo restamos 7 dias porque calcula la semana siguiente */
        if (calendarioInicioSemana.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
            calendarioInicioSemana.add(Calendar.DATE, Calendar.MONDAY - calendarioInicioSemana.get(Calendar.DAY_OF_WEEK));
            calendarioInicioSemana.add(Calendar.DATE, -7);
        } else {
            calendarioInicioSemana.add(Calendar.DATE, Calendar.MONDAY - calendarioInicioSemana.get(Calendar.DAY_OF_WEEK));
        }

        Date primerDiaDeLaSemana = calendarioInicioSemana.getTime();
        System.out.println("primer dia " + primerDiaDeLaSemana.toString());

        int dinero1 = 0;
        int dinero2 = 0;
        int dinero3 = 0;
        int dinero4 = 0;
        int dinero5 = 0;
        int dinero6 = 0;
        int dinero7 = 0;

        Calendar cal = Calendar.getInstance();
        cal.setTime(primerDiaDeLaSemana);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        for (int i = 0; i < listaTodos.size(); i++) {

            Calendar cal2 = Calendar.getInstance();
            cal2.setTime(listaTodos.get(i).getFechafactura());

            int dayF = cal2.get(Calendar.DAY_OF_MONTH);

            System.out.println(listaTodos.get(i).getFechafactura().getMonth());

            System.out.println(listaTodos.get(i).getFechafactura().getDay());

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day) {

                System.out.println("Lunes " + (day));

                dinero1 += listaTodos.get(i).getTotalfactura();

            }

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day + 1) {

                System.out.println("Martes" + (primerDiaDeLaSemana.getDay() + 1));
                dinero2 += listaTodos.get(i).getTotalfactura();

            }

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day + 2) {

                System.out.println("Miercoles" + (primerDiaDeLaSemana.getDay() + 2));

                dinero3 += listaTodos.get(i).getTotalfactura();

            }

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day + 3) {

                dinero4 += listaTodos.get(i).getTotalfactura();

            }

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day + 4) {

                dinero5 += listaTodos.get(i).getTotalfactura();

            }

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day + 5) {

                dinero6 += listaTodos.get(i).getTotalfactura();

            }

            if (listaTodos.get(i).getFechafactura().getYear() == primerDiaDeLaSemana.getYear() && listaTodos.get(i).getFechafactura().getMonth() == primerDiaDeLaSemana.getMonth() && dayF == day + 6) {

                dinero7 += listaTodos.get(i).getTotalfactura();

            }

        }

        List listaReportes = new ArrayList();

        List<DiasVentas> listaVentas = new ArrayList();

        DiasVentas objeto = new DiasVentas();
        objeto.setDia("Lunes");
        objeto.setMes(fecha);
        objeto.setVenta(dinero1);

        listaVentas.add(objeto);

        DiasVentas objeto2 = new DiasVentas();
        objeto2.setDia("Martes");
        objeto2.setMes(fecha);
        objeto2.setVenta(dinero2);

        listaVentas.add(objeto2);

        DiasVentas objeto3 = new DiasVentas();
        objeto3.setDia("Miercoles");
        objeto3.setMes(fecha);
        objeto3.setVenta(dinero3);

        listaVentas.add(objeto3);

        DiasVentas objeto4 = new DiasVentas();
        objeto4.setDia("Jueves");
        objeto4.setMes(fecha);
        objeto4.setVenta(dinero4);

        listaVentas.add(objeto4);

        DiasVentas objeto5 = new DiasVentas();
        objeto5.setDia("Viernes");
        objeto5.setMes(fecha);
        objeto5.setVenta(dinero5);

        listaVentas.add(objeto5);

        DiasVentas objeto6 = new DiasVentas();
        objeto6.setDia("Sabado");
        objeto6.setMes(fecha);
        objeto6.setVenta(dinero6);

        listaVentas.add(objeto6);

        DiasVentas objeto7 = new DiasVentas();
        objeto7.setDia("Domingo");
        objeto7.setMes(fecha);
        objeto7.setVenta(dinero7);

        listaVentas.add(objeto7);

        Date actual = new Date();

        int contador2 = 0;
        for (int j = 0; j < dinero1; j++) {

            listaReportes.add(new Reporte(contador2, "Lunes", "Lunes"));
            contador2++;
        }

        for (int j = 0; j < dinero2; j++) {

            listaReportes.add(new Jugador(contador2, "Martes", "Martes"));
            contador2++;
        }
        for (int j = 0; j < dinero3; j++) {

            listaReportes.add(new Jugador(contador2, "Miercoles", "Miercoles"));
            contador2++;
        }
        for (int j = 0; j < dinero4; j++) {

            listaReportes.add(new Jugador(contador2, "Jueves", "Jueves"));
            contador2++;
        }
        for (int j = 0; j < dinero5; j++) {

            listaReportes.add(new Jugador(contador2, "Viernes", "Viernes"));
            contador2++;
        }
        for (int j = 0; j < dinero6; j++) {

            listaReportes.add(new Jugador(contador2, "Sabado", "Sabado"));
            contador2++;
        }

        for (int j = 0; j < dinero7; j++) {

            listaReportes.add(new Jugador(contador2, "Domingo", "Domingo"));
            contador2++;
        }

        for (int i = 0; i < listaVentas.size(); i++) {

            System.out.println(listaVentas.get(i).getDia());

        }

        File ija = new File("reportediaSemana.jasper");
        JasperReport reporte;
        try {

            reporte = (JasperReport) JRLoader.loadObject(ija);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, new JRBeanCollectionDataSource(listaVentas));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new File("reporteGraficoVentasSemana.pdf"));

            exporter.exportReport();

        } catch (JRException ex) {
            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
        }

        emf.close();
// TODO add your handling code here:
    }//GEN-LAST:event_botongenerarreporteActionPerformed

    private void Reporte5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporte5ActionPerformed

        
        // TODO add your handling code here:

        int aÃ±o = 117;
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("RestauranteTorteliPU");//PruebaJPAPU es el nombre de nuestra unidad de persistencia

        FacturaJpaController dao = new FacturaJpaController(emf);//Creamos un controlador de personal
        PedidoJpaController pedidoJPA = new PedidoJpaController(emf);//Creamos un controlador de personal

        List<Factura> listaTodos = dao.findFacturaEntities();

        HashMap<Integer, List<Integer>> hashMap1 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap2 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap3 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap4 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap5 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap6 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap7 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap8 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap9 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap10 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap11 = new HashMap<Integer, List<Integer>>();
        HashMap<Integer, List<Integer>> hashMap12 = new HashMap<Integer, List<Integer>>();

        for (int i = 0; i < listaTodos.size(); i++) {

            System.out.println(listaTodos.get(i).getFechafactura().getYear() + "");

            if (listaTodos.get(i).getFechafactura().getMonth() == 0 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap1.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap1.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap1.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 1 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap2.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap2.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap2.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 2 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap3.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap3.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap3.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 3 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap4.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap4.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap4.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 4 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap5.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap5.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap5.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 5 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap6.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap6.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap6.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 6 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap7.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap7.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap7.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 7 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap8.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap8.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap8.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 8 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap9.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap9.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap9.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 9 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap10.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap10.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap10.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 10 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap11.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap11.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap11.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

            if (listaTodos.get(i).getFechafactura().getMonth() == 11 && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {

                if (!hashMap12.containsKey(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado())) {

                    List<Integer> list = new ArrayList<Integer>();
                    list.add(listaTodos.get(i).getTotalfactura());

                    hashMap12.put(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado(), list);
                } else {
                    hashMap12.get(pedidoJPA.findPedido(listaTodos.get(i).getPedidoIdpedido().getIdpedido()).getEmpleadoIdempleado().getIdempleado()).add(listaTodos.get(i).getTotalfactura());
                }
            }

        }

        ArrayList<Meseros> listaMeseros1 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap1.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Enero");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros1.add(meseros);

        }

        Collections.sort(listaMeseros1, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros2 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap2.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Febrero");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros2.add(meseros);

        }

        Collections.sort(listaMeseros2, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros3 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap3.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Marzo");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros3.add(meseros);

        }

        Collections.sort(listaMeseros3, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros4 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap4.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Abril");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros4.add(meseros);

        }

        Collections.sort(listaMeseros4, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros5 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap5.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Mayo");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros5.add(meseros);

        }

        Collections.sort(listaMeseros5, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros6 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap6.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Junio");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros6.add(meseros);

        }

        Collections.sort(listaMeseros6, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros7 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap7.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Julio");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros7.add(meseros);

        }

        Collections.sort(listaMeseros7, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros8 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap8.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Agosto");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros8.add(meseros);

        }

        Collections.sort(listaMeseros8, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros9 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap9.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Septiembre");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros9.add(meseros);

        }

        Collections.sort(listaMeseros9, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros10 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap10.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Octubre");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros10.add(meseros);

        }

        Collections.sort(listaMeseros10, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros11 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap11.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Noviembre");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros11.add(meseros);

        }

        Collections.sort(listaMeseros11, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> listaMeseros12 = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : hashMap12.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            Meseros meseros = new Meseros();
            meseros.setVenta(acumulador);
            meseros.setMes("Diciembre");
            meseros.setMesero(entry.getKey() + "");
            listaMeseros12.add(meseros);

        }

        Collections.sort(listaMeseros12, new Comparator<Meseros>() {

            @Override
            public int compare(Meseros p1, Meseros p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(p2.getVenta()).compareTo(new Integer(p1.getVenta()));
            }
        });

        ArrayList<Meseros> mejoresAÃ±o = new ArrayList<>();

        if (listaMeseros1.size() > 0) {

            mejoresAÃ±o.add(listaMeseros1.get(0));
        }

        if (listaMeseros2.size() > 0) {

            mejoresAÃ±o.add(listaMeseros2.get(0));
        }
        if (listaMeseros3.size() > 0) {

            mejoresAÃ±o.add(listaMeseros3.get(0));
        }
        if (listaMeseros4.size() > 0) {

            mejoresAÃ±o.add(listaMeseros4.get(0));
        }
        if (listaMeseros5.size() > 0) {

            mejoresAÃ±o.add(listaMeseros5.get(0));
        }
        if (listaMeseros6.size() > 0) {

            mejoresAÃ±o.add(listaMeseros6.get(0));
        }
        if (listaMeseros7.size() > 0) {

            mejoresAÃ±o.add(listaMeseros7.get(0));
        }
        if (listaMeseros8.size() > 0) {

            mejoresAÃ±o.add(listaMeseros8.get(0));
        }
        if (listaMeseros9.size() > 0) {

            mejoresAÃ±o.add(listaMeseros9.get(0));
        }
        if (listaMeseros10.size() > 0) {

            mejoresAÃ±o.add(listaMeseros10.get(0));
        }
        if (listaMeseros11.size() > 0) {

            mejoresAÃ±o.add(listaMeseros11.get(0));
        }
        if (listaMeseros12.size() > 0) {

            mejoresAÃ±o.add(listaMeseros12.get(0));
        }

        File ija = new File("reporteMeseros.jasper");
        JasperReport reporte;
        try {

            reporte = (JasperReport) JRLoader.loadObject(ija);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, new JRBeanCollectionDataSource(mejoresAÃ±o));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new File("reportemeserodelmes.pdf"));

            exporter.exportReport();

            JOptionPane.showMessageDialog(null, "Reporte generado con exito");

        } catch (JRException ex) {
            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_Reporte5ActionPerformed

    private void Reporte6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporte6ActionPerformed

        
        int mes = 5;
        int aÃ±o = 117;

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("RestauranteTorteliPU");//PruebaJPAPU es el nombre de nuestra unidad de persistencia

        FacturaJpaController dao = new FacturaJpaController(emf);//Creamos un controlador de personal
        PedidoJpaController pedidoJPA = new PedidoJpaController(emf);//Creamos un controlador de personal

        List<Factura> listaTodos = dao.findFacturaEntities();

        HashMap<Integer, List<Integer>> listaDias = new HashMap<Integer, List<Integer>>();

        for (int i = 0; i < listaTodos.size(); i++) {

            if (listaTodos.get(i).getFechafactura().getMonth() == mes && listaTodos.get(i).getFechafactura().getYear() == aÃ±o) {
            }

            Calendar cal = Calendar.getInstance();
            cal.setTime(listaTodos.get(i).getFechafactura());
            int day = cal.get(Calendar.DAY_OF_MONTH);

            if (!listaDias.containsKey(day)) {

                List<Integer> list = new ArrayList<Integer>();
                list.add(listaTodos.get(i).getTotalfactura());

                listaDias.put(day, list);
            } else {
                listaDias.get(day).add(listaTodos.get(i).getTotalfactura());
            }

        }

        String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", " ;Septiembre", "Octubre", "Noviembre", "Diciemrbre"};

        ArrayList<DiasVentas> listaDiasVentas = new ArrayList<>();

        for (Map.Entry<Integer, List<Integer>> entry : listaDias.entrySet()) {

            int acumulador = 0;
            for (int i = 0; i < entry.getValue().size(); i++) {

                acumulador += entry.getValue().get(i);
            }

            DiasVentas dias = new DiasVentas();
            dias.setVenta(acumulador);

            dias.setMes(meses[mes]);
            dias.setDia(entry.getKey() + "");
            listaDiasVentas.add(dias);

        }

        Collections.sort(listaDiasVentas, new Comparator<DiasVentas>() {

            @Override
            public int compare(DiasVentas p1, DiasVentas p2) {
                // Aqui esta el truco, ahora comparamos p2 con p1 y no al reves como antes
                return new Integer(Integer.parseInt(p2.getDia())).compareTo(new Integer(Integer.parseInt(p1.getDia())));
            }
        });

        File ija = new File("reporteVentasDias.jasper");
        JasperReport reporte;
        try {

            reporte = (JasperReport) JRLoader.loadObject(ija);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, new JRBeanCollectionDataSource(listaDiasVentas));
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new File("reporteVentaspordias.pdf"));

            exporter.exportReport();

            JOptionPane.showMessageDialog(null, "Reporte generado con exito");

        } catch (JRException ex) {
            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_Reporte6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

                this.setVisible(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reportes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Reporte1;
    public javax.swing.JButton Reporte2;
    public javax.swing.JButton Reporte3;
    public javax.swing.JButton Reporte4;
    public javax.swing.JButton Reporte5;
    public javax.swing.JButton Reporte6;
    private javax.swing.JButton botongenerarreporte;
    private com.toedter.calendar.JCalendar calendario;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JFrame ventanaVentaSemana;
    // End of variables declaration//GEN-END:variables
}
